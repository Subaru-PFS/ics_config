#!/usr/bin/env sh

usage()
{
    (
       echo "usage: $0: [-r root-directory]\n"
       echo "    If no root directory is specified, use $ICS_ROOT\n" 
    ) >&2
    exit 1
}

ICS_ROOT=$HOME/mhs
while getopts :h?r: arg; do
    case $arg in
       r) ICS_ROOT="$OPTARG"
           ;;
       ?) echo "unknown argument: $OPTARG"
          usage
          ;;
       h) usage
          ;;
    esac
done

# Some sanity tests.
#  . make is required by eups, but not always supplied.
requiredPrograms="make"
for p in $requiredPrograms; do
    if ! type $p >/dev/null 2>&1; then 
       echo "FATAL: we need some version of $p"
       exit 2
    fi
done

# Configuration variables.
# 1. The root directory for image/data files, logs, etc. 
#    In practice, I'd make this the home directory for an operations/development account.
#    This script will create several subdirectories, which could then be moved around/linked/etc.
#
if test -d $ICS_ROOT; then 
    echo "ICS_ROOT=$ICS_ROOT exists ... NOT overwriting it. It contains:" >&2
    ls -l $ICS_ROOT >&2 
    exit 1
else
    echo "####### Bootstrapping the ICS MHS and actors into $ICS_ROOT...." >&2
fi

# 2. The root directory for development. The git repos will be cloned into this
#    By default, uses $ICS_ROOT/devel
ICS_DEVEL_ROOT=$ICS_ROOT/devel

# 3. The root directory for eups products. 
#    By default, uses $EUPS_PATH if already set, otherwise $ICS_ROOT/products 
export EUPS_PATH=${EUPS_PATH:-${ICS_ROOT}/products}

# 4. The EUPS version to fetch and install.
#    If eups is already installed, bails out.
if type eups >/dev/null 2>&1; then
    echo "eups is already installed -- NOT overwriting it. ICS products will be added to existing EUPS database." >&2
    unset EUPS_VERSION
else
    EUPS_VERSION=1.2.33
fi

# 4. The ICS pieces we want to install, in order. 
#    Note that ics_mhs_config is handled independently, by this script.
# 
ICS_DEVEL_PRODUCTS="ics_mhs_actorcore 
                    ics_mhs_tron 
                    ics_mhs_actorkeys
                    ics_mhs_mcsActor
                    ics_mhs_mpsActor
                    ics_mhs_pficsActor
                    ics_mhs_root"

ICS_BOOTSTRAP_VERSION=1.5
#################################

mkdir -p $ICS_ROOT
mkdir -p $ICS_DEVEL_ROOT
cd $ICS_DEVEL_ROOT

# Do we need to bootstrap a eups version?
if test -n "$EUPS_VERSION"; then 
    echo 
    echo "######## installing eups...."
    git clone -b $EUPS_VERSION https://github.com/RobertLuptonTheGood/eups.git eups 
    (cd eups 
        ./configure --with-eups=$EUPS_PATH --prefix=$EUPS_PATH/eups --disable-docs
        make install)
    source $EUPS_PATH/eups/bin/setups.sh

    # Now that we have a eups to tell us things, reinstall to the proper path.
    eupsPrefix=$(eups path)/$(eups flavor)/eups/$EUPS_VERSION
    (cd eups 
        ./configure --with-eups=$EUPS_PATH --prefix=$eupsPrefix
        make install
        make declare
        eups declare -c eups $EUPS_VERSION
    )

    # Shuffle links around
    mv $EUPS_PATH/eups $EUPS_PATH/eups-bootstrap
    ln -s $eupsPrefix $EUPS_PATH/eups

    setup -v eups
fi

# Clean out any possible crud in the environment
for p in ics_mhs_config $ICS_DEVEL_PRODUCTS; do
    unsetup -f -q $p >& /dev/null
done
# export | egrep '( SETUP_)|(_DIR=)'

# Deal with the ics_mhs_config product, which does not quite fit standard git product rules, since
#   it gets locally configured for this system.
#
if test -n "$(eups list -q -s ics_mhs_config)" && test -d "$ICS_MHS_CONFIG_DIR"; then
    echo "the ics_mhs_config product is already setup. We'll use that enviroment and not overwrite it." >&2
else
    cd $ICS_DEVEL_ROOT          # to be safe.
    git clone gitolite@pfs.ipmu.jp:ics_mhs_config
    ( cd ics_mhs_config;
        setup -r .
        sed "s;%(ICS_ROOT);$ICS_ROOT;g" < ups/ics_mhs_config.table-in > ups/ics_mhs_config.table
        eups declare -c -r $PWD ics_mhs_config local
    )
    setup ics_mhs_config
    echo
    echo "######## set ics_mhs_config variables to:"
    cat $(eups list -m ics_mhs_config)
fi

# Do the rest of the products. Leave them in place. This is pretty
# horrifying, but for a development bootstrap and until we choose an
# installer it may be the right choice.
#
for p in $ICS_DEVEL_PRODUCTS; do
    echo
    echo "######## installing a live (git) version of ${p}..."

    cd $ICS_DEVEL_ROOT          # to be safe.
    git clone gitolite@pfs.ipmu.jp:$p
    ( cd $p;
        eups declare -v -F -r $PWD $p git
        eups declare -v -c $p git
    )
    setup -v $p
done

# Create any necessary subdirectories to run under $ICS_ROOT
#
mkdir -p ${ICS_MHS_DATA_ROOT}
mkdir -p ${ICS_MHS_LOGS_ROOT}/tron

# Finish with a reminder
echo
echo "###### The bootstrap MHS parts are installed."
echo

if test -n "$EUPS_VERSION"; then
    echo "###### You _must_ now source $EUPS_PATH/eups/bin/setups.sh before anything else will work. That's:"
    echo
    echo ". $EUPS_DIR/bin/setups.sh"
    echo   or
    echo "source $EUPS_DIR/bin/setups.csh"
    echo   or
    echo "source $EUPS_DIR/bin/setups.zsh"
    echo
    echo "You probably also want to put that into your login script."
    echo 
    echo "After setting up eups, 'eups list' will show all available products and versions, and "
    echo "'setup -v ics_mhs_root' will setup all the above bootstrap MHS products."
fi

exit 0



