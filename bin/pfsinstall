#!/usr/bin/env bash

usage()
{
    (
        echo "usage: $0 [-c] [-U URL] product-list\n"
        echo "   Install PFS git products into our eups tree."
        echo
        echo "    product-list is a space-delimited list of productName:productVersion pairs."
        echo "        e.g. tron_actorcore:1.6.2 ics_actorkeys:master"
        echo
        echo "    products are installed in the order listed, and will be built and"
        echo "       installed against any previously listed product+version"
        echo
        echo "    The productVersions must be existing git tags, and the installed "
        echo "    eups versions will match. The .git tree will in general be installed."
        echo
        echo "    Installed products will always be declared current."
        echo "    If an version has already been installed, a new eups version will be installed, "
        echo "       with a trailing letter to distinguish it."
        echo
        echo " Args:"
        echo "  -U URL Use this base URL for git products. Will resolve to $URL/{product}.git"
    ) >&2
    exit 1
}

ICS_DEVEL_PRODUCTS=

get_product()
{
    echo "${1%%:*}"
}

get_version()
{
    local v=${1##*:}
    echo "${v:-master}"
}

get_git_version()
{
    local vers
    local IS_TAG
    local full_version

    vers=$(git describe --exact-match 2>/dev/null)
    IS_TAG=$?

    if test $IS_TAG -ne 0; then
        full_version=$(git describe)
        vers=$full_version
    fi

    echo $vers
}

get_products()
{
    local plist=""
    for p in $ICS_INSTALL_PRODUCTS; do
        plist="$plist $(get_product $p)"
    done

    echo $plist
}

get_versions()
{
    local vlist=""
    for p in $ICS_INSTALL_PRODUCTS; do
        vlist="$vlist $(get_version $p)"
    done

    echo $vlist
}

# Return the next version suffix required to install the given product and version.
# Basically, if the version has already been installed, append the next unused letter
get_suffix()
{
    local prod=$1
    local vers=$2

    # If the version has not yet been installed, no suffix needed
    if test -z "$(eups list $prod $vers 2>/dev/null | sed 's/^ *//; s/ .*//')"; then
        echo ""
        return
    fi

    # If the version has been installed, peel off highest trailing letter and increment it.
    # Slightly gross: the letter before "a" is the backtick.
    versMatch=${vers//\./\\.}
    have=$(eups list $prod "${vers}*" | sed "s/^ *//; s/ .*$//; s/${versMatch}//" | sort | tail -1)
    if test "$have" = ""; then
        have='`'
    fi

    next=$(echo "$have" | tr '`-y' 'a-z')
    echo $next
}

URL="https://github.com/Subaru-PFS"
while getopts 'cU:h' arg; do
    case $arg in
       U) URL=${OPTARG}
          echo "-u got $URL"
          ;;

       ?) echo "unknown argument: $OPTARG"
          usage
          ;;
       :) echo "Option -$OPTARG requires an argument." >&2
          usage
          ;;
       h) usage
          ;;

    esac
done
shift $((OPTIND-1))

. $EUPS_DIR/bin/setups.sh

ICS_INSTALL_PRODUCTS="$@"

#################################

ICS_BUILD_ROOT=/software/build/$USER
mkdir -p $ICS_BUILD_ROOT 2>/dev/null
cd $ICS_BUILD_ROOT
if test $(pwd) != $ICS_BUILD_ROOT; then
    echo "Could not mkdir or cd into $ICS_BUILD_ROOT. Not safe, so exiting." >&2
    exit 1
fi

# Clean out any possible crud in the environment
for p in $(get_products); do
    if test $p = ics_config; then
        ICS_MHS_ROOT_SAVED=$ICS_MHS_ROOT
    fi
    unsetup -f -q $p >/dev/null 2>/dev/null
    if test $p = ics_config; then
        ICS_MHS_ROOT=$ICS_MHS_ROOT_SAVED
    fi
done

# Install the requested products. We install a full, perhaps tagged, version in the eups
# product tree, 
#
for p in $ICS_INSTALL_PRODUCTS; do
    prod=$(get_product $p)
    gitVers=$(get_version $p)
    suffix=$(get_suffix $prod $gitVers)
    eupsVers=${gitVers}${suffix}
    echo
    echo "######## installing version ${gitVers}/${eupsVers} of $prod..."

    cd $ICS_BUILD_ROOT
    if test -d ${prod}; then
        REMOVE=$ICS_BUILD_ROOT/${prod}
        echo REMOVING $REMOVE
        rm -rf $REMOVE || (echo "FAILED to remove ${REMOVE}: exiting" >&2 && exit 1)
    fi
    
    git clone --recursive -b $gitVers ${URL}/${prod}.git
    if test $? -gt 0; then
        echo
        echo "pfsinstall: check your access and git credentials for ${URL}/${prod}.git" >&2
        exit 2
    fi
    ( cd $prod;
      # Bootstrap: 
      if test "$prod" = "ics_config"; then
          if test -z "$ICS_MHS_ROOT"; then
              echo ICS_MHS_ROOT cannot be empty when installing ics_config >&2
              export
              exit 2
          fi
          sed "s;%(ICS_ROOT);$ICS_MHS_ROOT;g" < ups/ics_config.table-in > ups/ics_config.table
      fi

      # Explicitly -keep already installed versions. Since
      # we unset everything which we install before starting, this
      # means that we honor all the product:versions this script has
      # already installed
      setup -v -k -r .

      gitTag=$(get_git_version)
      if test $gitTag != $gitVers; then
          echo "   requested version $gitVers is not a tag. Bailing out." >&2
          exit 3
      fi
      
      eupsinstall VERSION_SUFFIX="$suffix"
      ( cd $(eups list -d $prod ${eupsVers});
        ln -s lib/python python
      )
    )

    # Finally, set up the version we just installed.
    setup -v -k $prof $eupsVers

    # clean up staging directory.
    REMOVE=$ICS_BUILD_ROOT/${prod}
    echo REMOVING $REMOVE
    rm -rf $REMOVE

done

exit 0
